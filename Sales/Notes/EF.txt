Entity Framework Core
  Мощная ORM система, сводящая работу с БД к работе с коллекциями данных - с
контекстом. Имеет два подхода: 
  "Data first" - есть БД, нужно писать приложение
  "Code first" - БД нет, нужно ее добавить к уже существующему проекту.
     Рекомендованный подход, т.к. позволяет поддерживать связь БД и сущностей.

Установка (NuGet)
- Microsoft.EntityFrameworkCore - основа
- Microsoft.EntityFrameworkCore.SqlServer - драйверы для MS SQL Server
- Microsoft.EntityFrameworkCore.Tools - инструменты командной строки для
    управления БД (миграции)

Разработка
Центром технологии является контекст - класс, управляющий данными.
В папке контекста создают сущности
+ класс-контекст, наследник DbContext
В контексте перегружаем метод OnConfiguring и указываем строку подключения к БД
  на этапе разработки БД еще не существует

Миграции
Автоматическая генерация кода для создания и наполнения БД, в т.ч.
внесение изменений в существующую структуру
- запускаем консоль PM (PackageManager)  Tools - NuGet - Console
- вводим (Deps - название миграции)
   PM> Add-Migration Deps
   должна появиться папка Migrations, в ней файлы с миграцией
- вводим
   PM> Update-Database
   создается БД

Подключаем Студию к БД
Tools - Connect to Database
название сервера: (LocalDB)\MSSQLLocalDB
выбираем из списка баз данных нашу EfSales111 (по имени Initial Catalog=EfSales111)
В обозревателе серверов показывается подключение к БД


-------------------- Внесение изменений -----------------
Описываем новый класс-сущность Product
В контекст данных добавляем коллекцию (именно это повлияет на стр-ру БД)
    public DbSet<Product> Products { get; set; }
В консоли пакетов
    PM> Add-Migration Prods
    PM> Update-Database

--------------- Seed - начальное заполнение данными ---------
Обычно в установочном пакете программы должны быть начальные, инициализирующие
данные для БД: начальный пользователь-админ, первый форум/блог/тема,
картинки-смайлы и т.п., переводы на несколько языков интерфейса
За заполнение отвечает событие контекста
    OnModelCreating(ModelBuilder modelBuilder)
Добавление данных имеет вид
    modelBuilder.Entity<Department>().HasData(new Department { Id = Guid.Parse("D3C376E4-BCE3-4D85-ABA4-E3CF49612C94"), Name = "IT отдел" });
    modelBuilder.Entity<Product>().HasData(new Product { Id = Guid.Parse("DA1E17BB-A90D-4C79-B801-5462FB070F57"), Name = "Гвоздь 100мм", Price = 10.50 });
    
Д.З. Описать сущность Sale, реализовать коллекцию в контексте (DbSet)
На интерфейс (рядом с счетчиком) добавить кнопку "генерировать 10 случайных продаж"
При нажатии на кнопку генерируются и добавляются 10 продаж, обновляется счетчик
(не забывать сохранять контекст .SaveChanges() )


-------------------------------------------------------------------------------
Отношения (данных)
Один-к-одному
Один-ко-многим
Многие-ко-многим

EF позволяет "отрабатывать" отношения и строить навигационные свойства - 
 дополнительные свойства сущности, которые ссылаются на связанные элементы
 другой сущности.

Для установки отношения:
 - В одной сущности (один-к-), например, Отдел, указываем коллекцию связанных
     сущностей                           это свойство (get; set;) называется навигационным
      public class Department { ... public List<Manager> Managers { get; set; } ... }
 
 - В другой сущности (-к-многим) указываем одиночное свойство
     public class Manager { ... public Department MainDep { get; set; } ... }

 - В контексте указываем настройку отношения
    modelBuilder.Entity<Manager>()        
        .HasOne(m => m.MainDep)           
        .WithMany(d => d.Managers)        
        .HasForeignKey(m => m.IdMainDep); 

 - При обращении к коллекциям используем метод .Include()
     dataContext.Managers.Include(m => m.MainDep)....
   !! в некоторых случаях Include() происходит автоматически и не требует
   явного указания
