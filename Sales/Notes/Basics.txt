Основы ADO.NET
ADO.NET - технология (набор библиотек классов) для взаимодействия 
прогаммы (платформы .NET) и БД

- Создаем приложение оконного типа (WPF)
- Добавляем к проекту БД
   = убеждаемся, что в Студии установлены инструменты БД 
      (VS Installer - Другие наборы инструментов - Хранение и обработка данных)
   = Project - Add new Item - [Data] - Service-based Database 
      (Проект - добавить - [Данные] - БД основанная на службах)
- Организовываем подключение к БД из программы
   = устанавливаем пакет для SQL Server (System.Data.SqlClient)
      Tools - NuGet PM - Manage -- Search(System.Data.SqlClient) - Install
   = (для WPF) создаем событие окна Loaded
   = Переходим к коду (.cs)
- Наполняем БД. Можно делать как программно, так и через запросы.


Выполнение запросов
- задается текст запроса (SQL) - commandText
- создается объект-команда, в него передается текст и объект-подключение
   SqlCommand(sql, connection)
  после выполнение команду нужно закрывать (.Dispose()) либо использовать using
                  using var x = ...             [ x.Dispose(); x=null; ]
- Создание команды не выполняет ее, более того можно использовать многократно
    cmd = new SqlCommand()
    cmd.Connection = ...
    cmd.CommandText = "SELECT...."
    cmd.ExecuteXxxx() - выполнение команды
    cmd.CommandText = "UPDATE...."
    cmd.ExecuteXxxx() - выполнение команды с новым текстом

- Виды команд:
   ExecuteNonQuery - без возврата результатов, годится для DDL, UPDATE, DELETE, INSERT
   ExecuteScalar - возвращает один объект, если в запросе таблица, то ее первый элемент
   ExecuteReader - возвращает всю таблицу

Д.З. В Тимс приложены файлы с созданием и заполнением таблиц Продуктов и Менеджеров.
Реализовать выполнение этих запросов для своих БД
Добавить в программу-Монитор данные о количестве записей в каждой из таблиц
В ответ достаточно приложить скриншот главного окна, если будет ссылка
на репозиторий, то также разместить в репозитории скриншот